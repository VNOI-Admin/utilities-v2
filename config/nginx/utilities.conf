log_format custom '';

server {
	access_log /var/log/nginx/api.log; # custom;
	server_name vpn.vnoi.info;

	proxy_set_header Authorization "Bearer $cookie_accessToken";

	location ~ ^/(?<ipaddress>\d+\.\d+\.\d+\.\d+)/(.*) {
		return 404;
		if ($request_method = OPTIONS) {
			add_header Access-Control-Allow-Origin '*';
			add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
			add_header Content-Type text/plain;
			add_header Content-Length 0;
			return 204;
		}

#		auth_request /streamauth;
    rewrite ^/(\d+\.\d+\.\d+\.\d+)/(.*)$ /hls/$2 break;
		proxy_pass http://$1:100;
		proxy_set_header Host $host;

		proxy_set_header User-Agent $http_user_agent;
		proxy_set_header X-Forwarded-Host $http_host;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#		proxy_set_header X-Forwarded-Proto $scheme;
#		proxy_set_header Authorization "Bearer $cookie_accessToken";
	}

#	location = /streamauth {
#		proxy_pass http://localhost:8001/user/me;
#		proxy_pass_request_body off;
#		proxy_set_header Content-Length "";
#		proxy_set_header X-Original-URI $request_uri;
#		proxy_set_header Authorization "Bearer $cookie_accessToken";
#	}


#    location ^~ /admin {
        #rewrite /admin(.*) $1 break;
#        alias /home/azureuser/utilities-v2/apps/admin-panel/dist;
#	index index.html;
#	proxy_pass http://localhost:3000;
#	try_files $uri $uri/ index.html;

#	try_files $uri index.html;
#       proxy_set_header X-Original-URI $request_uri;
#    }

  location = /user {
    return 302 $scheme://$host/user/;
  }

  location /user {
    rewrite /user(.*) $1 break;
    proxy_pass http://localhost:8001/;
    proxy_set_header X-Original-URI $request_uri;
  }

  location = /auth {
    return 302 $scheme://$host/auth/;
  }

  location /auth {
	rewrite /auth(.*) $1 break;
    proxy_pass http://localhost:8002/;
    proxy_set_header X-Original-URI $request_uri;
  }

  location = /internal {
    return 302 $scheme://$host/internal/;
  }

  location /internal {
	rewrite /internal(.*) $1 break;
    proxy_pass http://localhost:8003/;
    proxy_set_header X-Original-URI $request_uri;
  }

  location = /printing {
    return 302 $scheme://$host/printing/;
  }

  location /printing {
    rewrite /printing(.*) $1 break;
    proxy_pass http://localhost:8004/;
    proxy_set_header X-Original-URI $request_uri;
  }

  listen 80; # Use certbot to get SSL certificate
}
